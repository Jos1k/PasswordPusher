name: Build and Deploy

on:
  schedule:
    - cron: "0 1 * * *"
  push:
    branches: [ "main" ]
    tags:
      - "v*.*.*"
  pull_request:
    branches: [ "main" ]

env:
  REGISTRY: ghcr.io

jobs:
  build:
    runs-on: ubuntu-latest
    environment: dev
    outputs:
      dockerTags: ${{ steps.meta.outputs.tags }}
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      -
        name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ env.REGISTRY }}/jos1k/passwordpusher-api
          tags: |
            type=schedule, pattern={{date 'YYYYMMDD'}}, prefix=nightly-
            type=semver,pattern={{version}}
            type=ref,event=branch
            type=ref,event=pr
            type=sha
          labels : |
            org.opencontainers.image.description=Password Pusher API image
            org.opencontainers.image.vendor=Ihor Hadzera
            org.opencontainers.image.title=Password Pusher API
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      -
        name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          file: ./PasswordPusher.Api/Dockerfile
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      - name: Delete old untagged images
        uses: snok/container-retention-policy@v2
        with:
          image-names: passwordpusher-api*
          cut-off: One second ago UTC
          keep-at-least: 0
          account-type: personal
          untagged-only: true
          token: ${{ secrets.PAT }}
  infrastructure_plan:
    runs-on: ubuntu-latest
    environment: dev
    needs: build
    permissions:
      id-token: write
      contents: read
      pull-requests: write
    steps:
      - uses: actions/checkout@v3
      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.x
      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true
      - name: Terraform Init
        id: init
        run: terraform init
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -input=false -var r53_zone_id=${{secrets.HOSTED_ZONE_ID}} -var domain_name=${{vars.DOMAIN}} -var container_image=${{needs.build.outputs.dockerTags}}
        continue-on-error: true
      - name: Create the plan summary
        if: ${{github.event_name == 'pull_request'}}
        uses: actions/github-script@v6
        id: summary
        env:
          PLAN: '${{ steps.plan.outputs.stdout }}'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Prep the output
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>
            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`
            </details>
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            
            <details><summary>Show Plan</summary>
            
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
            
            </details>
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
            
            // 2. Set the output variable
            const fs = require('fs');
            fs.writeFileSync('${{ env.tf_actions_working_dir }}/summary.md', output);
            core.setOutput('summary', output);
      - name: Write the step summary
        run: cat summary.md >> $GITHUB_STEP_SUMMARY
  deploy:
    if: ${{ success() && github.event_name != 'push' && github.ref == 'refs/heads/main'}}
    runs-on: ubuntu-latest
    environment: dev
    needs: [build, infrastructure_plan]
    permissions:
      id-token: write
      contents: read

    steps:
      - uses: actions/checkout@v3
      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.x
      - 
        name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::634610596057:role/GitHubAction-AssumeRoleWithAction
          aws-region: ${{vars.AWS_REGION}}
      - 
        name: Sts GetCallerIdentity
        run: |
          aws sts get-caller-identity


