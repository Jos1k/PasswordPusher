name: Build and Deploy Dev

on:
  schedule:
    - cron: "0 1 * * *"
  push:
    branches: [ "main" ]
    tags:
      - "*.*.*"
  pull_request:
    branches: [ "main" ]

env:
  REGISTRY: ghcr.io
  tf_actions_working_dir: infrastructure/dev

jobs:
  build:
    name: Build Java App
    runs-on: ubuntu-latest
    environment: dev
    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
      -
        name: Setup java
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17
      -
        name: Setup Gradle
        uses: gradle/gradle-build-action@v2
      -
        name: Run build with Gradle Wrapper
        run: ./gradlew bootJar
      -
        name: Copy Jar file
        run: mv build/libs/$(ls build/libs) app.jar
      -
        name: Upload Jar file artifact
        uses: actions/upload-artifact@v3
        with:
          name: jar-file
          path: app.jar
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup java
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
      - name: Run build with Gradle Wrapper
        run: ./gradlew clean test --info
  dockerBuildAndPublish:
    name: Create and Publish Docker Image
    runs-on: ubuntu-latest
    needs: [build, test]
    environment: dev
    outputs:
      dockerMetaJson: ${{ steps.meta.outputs.json }}
    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
      -
        name: Download build artifact
        uses: actions/download-artifact@v3
        with:
          name: jar-file
      -
        name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ env.REGISTRY }}/jos1k/passwordpusher-api
          tags: |
            type=schedule, pattern={{date 'YYYYMMDD'}}, prefix=nightly-
            type=semver,pattern={{version}}
            type=ref,event=branch
            type=ref,event=pr
            type=sha,priority=1001
          labels : |
            org.opencontainers.image.description=Password Pusher API image
            org.opencontainers.image.vendor=Ihor Hadzera
            org.opencontainers.image.title=Password Pusher API
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      -
        name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          file: ./Dockerfile
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
  security:
    name: Run Security Scan
    runs-on: ubuntu-latest
    needs: dockerBuildAndPublish
    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
      - name: Snyk - Dependencies
        uses: snyk/actions/gradle-jdk17@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --sarif-file-output=snyk.sarif --severity-threshold=high
          command: test
      - name: Snyk - Docker
        continue-on-error: true
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: ${{fromJson(needs.dockerBuildAndPublish.outputs.dockerMetaJson).tags[0]}}
          args: --file=Dockerfile --severity-threshold=high
          command: test
      - name: Snyk - Infrastructure
        uses: snyk/actions/iac@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --scan=resource-changes --severity-threshold=high --report
          command: test
      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: snyk.sarif
  planAndDeploy:
    name: Plan And Deploy
    runs-on: ubuntu-latest
    environment: dev
    needs: [build,dockerBuildAndPublish,security]
    defaults:
      run:
        working-directory: ${{ env.tf_actions_working_dir }}
    permissions:
      id-token: write
      contents: read
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{secrets.AWS_AUTH_ROLE}}
          aws-region: ${{vars.AWS_REGION}}
      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.1
      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true
      - name: Terraform Init
        id: init
        run: terraform init
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -input=false -var r53_zone_id=${{secrets.HOSTED_ZONE_ID}} -var domain_name=${{vars.DOMAIN}} -var container_image=${{fromJson(needs.dockerBuildAndPublish.outputs.dockerMetaJson).tags[0]}} -var alarm_email=${{secrets.ALARM_EMAIL}} -out tf.plan
        continue-on-error: false
      - name: Create the plan summary
        if: ${{github.event_name == 'pull_request'}}
        uses: actions/github-script@v6
        id: comment
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
            })
      
            // 2. Prepare format of the comment
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>
      
            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`
      
            </details>
      
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
      
            <details><summary>Show Plan</summary>
      
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
      
            </details>
      
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
      
            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }
      - name: Terraform Apply
        id: apply
        run: terraform apply -no-color -input=false -auto-approve tf.plan